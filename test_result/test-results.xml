<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="704" time="2.125" timestamp="2024-05-16T17:44:04.866111" hostname="f7cd52579367"><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_default_eq" time="0.001" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_default_custom_eq" time="0.000" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_det_eq" time="0.000" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_rnd_eq_fail" time="0.001" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_inst_id_det_eq_fail" time="0.000" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_extra_details_diff_id_eq_fail" time="0.000" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_node_id_extra_details_same_id_eq_fail" time="0.000" /><testcase classname="tests.test_id_generation.TestIDGeneration" name="test_manager_node_id" time="0.001" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_bad_latitude" time="0.032" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_institution_not_found" time="0.021" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_node_not_found" time="0.029" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_nodes_with_same_id" time="0.025" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_nodes_with_same_name" time="0.034" /><testcase classname="tests.test_import_excel.XLSParserTest" name="test_normal_usage" time="0.031" /><testcase classname="tests.test_institution" name="test_institution_create_success[kwargs with name, id and type]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[args with name, id and type]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[arg with id and kwargs with name and type]" time="0.002" /><testcase classname="tests.test_institution" name="test_institution_create_success[kwargs with name and type]" time="0.002" /><testcase classname="tests.test_institution" name="test_institution_create_success[kwargs with name, type and empty id]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[kwargs with name, type and id as integer]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[args with all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[args with lat, long, alt, unlocode, and address equal to 0]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[checking lower and upper case in institution type in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[maximum value to lat. and long. in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[minimum value to lat. and long. in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing alt, unlocode, and address empty in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing alphabets in altitude in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing random value to unlocode in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[args with name and id]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing institution name to all fields except type, long. and lat. in args]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[kwargs with all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing name, lat. and long. only in kwargs]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[name and id in args and rest details in kwargs]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_success[passing name in args and name and longitude in kwargs]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_failure[kwargs and args with all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_failure[checking minimum value of long. and lat.]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_failure[checking maximum value of long. and lat.]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_create_failure[passing string to lat and long]" time="0.002" /><testcase classname="tests.test_institution" name="test_institution_match_success[id and name]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id only]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[name only]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id_contains subset]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__contains alphabet]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__contains subset using slicing]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__contains empty]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__in with list]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id_in with req. string to left]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__in with required string in between]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__in with required string in between using concat. operator]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_match_success[id__in with required string to the right]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_match_success[correct latitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[correct longitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[default inst. type]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_success[type__contains]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_all_details_match_success[checking address]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_all_details_match_success[passing correct unlocode]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_all_details_match_success[correct altitude]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_all_details_match_success[all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[name]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__contains string]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__contains with substring]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__contains empty]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__in with list]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__in with required string in between]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__in with required string to the left]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[id__in with concatenation operator]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[correct latitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[correct longitude]" time="0.002" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_success[passing inst. type]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_all_details_id_type_int_match_success[checking address]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_all_details_id_type_int_match_success[passing correct unlocode]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_all_details_id_type_int_match_success[correct altitude]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_all_details_id_type_int_match_success[all details with string id]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[id and name]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[id only]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[name only]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid field]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[id__in with substring]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid address]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid unlocode]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid latitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid longitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid altitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[invalid all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[passing valid string address as int]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[passing valid number altitude as string]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_match_fail[different type]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[id and name]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[id]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[id__in with list]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[id__in with substring]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[id__in empty]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid id with all valid details]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid address]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid unlocode]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid latitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid longitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[invalid altitude]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[passing valid string address as int]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[passing valid string unlocode as int]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[passing valid int altitude as string]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_id_type_int_match_fail[different inst. type]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_eq_success" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_eq_fail" time="0.001" /><testcase classname="tests.test_institution" name="test_refine_institution_add_address" time="0.000" /><testcase classname="tests.test_institution" name="test_refine_institution_remove_address" time="0.001" /><testcase classname="tests.test_institution" name="test_refine_institution_remove_address_fail" time="0.001" /><testcase classname="tests.test_institution" name="test_inst_type_hold_multiple_values[args with multiple inst-types]" time="0.001" /><testcase classname="tests.test_institution" name="test_inst_type_hold_multiple_values[kwargs with multi inst-types]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_success[all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_success[types__contains with single value]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_success[types__contains with types subset]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_success[types__in]" time="0.000" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_success[type__in]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_fail[all details]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_fail[type__contains with single value]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multiple_inst_type_match_fail[type__contains with types subset]" time="0.001" /><testcase classname="tests.test_institution" name="test_institution_with_multi_types_eq_success" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: name and nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: name, nodes and a owner]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: name, nodes and owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: all details]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: name, node and rest empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: all details]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: same details]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: nodes and rest in args]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: name, id and kwargs: rest]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: id and kwargs: rest]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: id and kwargs: links and nodes has different owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: empty and kwargs: links and nodes has same owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: all details but id as int]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: all details but id and name as number]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[kwargs: nodes, owners empty, and name and id as number]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[args: nodes, name but without id and owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link with short name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link with version]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link with life time start and end]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link with only life time start]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link with life time end]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link life time with IOS time zone]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link life time with microsecond]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link life time ISO timezone and microsecond]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link life time only date]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_creating_links[link lifetime UTC]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[link name only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[one node repeating]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[all details]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id and name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id and owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id and nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__in with link_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__in with list of strings]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__in with required string to the left]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__in with required string to the left using concat. operator]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__in with required string in between]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__contains with link_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__contains with substring]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__contains with small substring]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__contains with empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[id__contains with slice function]" time="0.000" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with a owner]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with owners one repeating]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with same owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with a list of strings]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with list of a string variable]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in with list of a string literal]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__in and id__in]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__contains a owner]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__contains same owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[owners__contains institution_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes__in list of nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes__in with list of different nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes_contains list of nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes__contains list of a node]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_success[nodes__contains node_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes only0]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[two same nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[three different nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[empty id only]" time="0.000" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[empty link and name only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[empty owners only]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes only1]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[all details with 2 owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[2 owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[checking caps]" time="0.003" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in with node object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in with owner object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in link_name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in slice func]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in invalid_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__in institution_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains list of strings]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id_contains string with required string to the left using concat. operator]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains string with required string to the left]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains node_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains node object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains owner object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[id__contains empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__in empty list0]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__in empty list1]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners_in institution with no id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__in node_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__in with node object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__contains list of different owners]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__contains institution_name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__contains empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__contains node object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[owners__contains node_name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__in with a node]" time="0.000" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__in empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__in institution object]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__in with node_id]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__in with node_name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__contains different_nodes]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__contains empty]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__contains node_name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[node__contains slice_function]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes__contains with required string to the left]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_fail[nodes_contains with substring of required string]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_sucess_with_optional_fields[version]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_sucess_with_optional_fields[short name]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_sucess_with_optional_fields[life time start]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_match_sucess_with_optional_fields[life time end]" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_eq_success" time="0.001" /><testcase classname="tests.test_links.TestLinks" name="test_link_not_eq" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[name and id with args]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[id and name with kwargs]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[kwargs with name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[args with pre-made institution]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[empty args and kwargs]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[args with id and kwargs with name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[id, name and type with args]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[id, name, and type with kwargs]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[kwargs with name and type]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[args with premade institution details]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution[id, name and longitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_institution_duplicate_id" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_multiple_institutions[only args]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_multiple_institutions[only kwargs]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_multiple_institutions[only institutions]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_adding_multiple_institutions[mixed args, kwargs, institutions]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_id_conflict" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_getting_single_institution" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_getting_multiple_institutions" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_empty_manager_get_institution" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_delete_institution" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_assigns_primary_owner_with_institution" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_assigns_primary_owner_with_values" time="0.000" /><testcase classname="tests.test_manager.TestManager" name="test_manager_assigns_primary_owner_with_no_value" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[values only]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[keywords only]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[with single owner]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[with multiple owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[with owner id as string]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[premade node]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[without id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[kwargs with all details]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[args with all details as number]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_without_primary_owner[passing empty node_name, node_id, and short_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_with_primary_owner[no owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_with_primary_owner[multiple owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_node_with_primary_owner[set with primary owner]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[id match]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[id and name match]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owners match with strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owners match with objects]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[name match]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[all match]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[id contains]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[id in list]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[id in string]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owners contains single owner as string]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owner contains single owner as list]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owners contains multiple owner]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node[owners in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[id match]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[short_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[version]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[longitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[latitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[altitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[unlocode]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[address]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[lifetime start__contains]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[lifetime end__contains]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[short_name__in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[short_name__contains]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[version__in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[version__contains]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_optional_attributes[unlocode__in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[owners contains mismatch]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[owners in mismatch]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[invalid field]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[empty contains]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[empty in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[no matching owner]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[id does not use owners id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[id case sensitive]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_node_fail[owner case sensitive]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[invalid short_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[invalid version]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[invalid longitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[invalid latitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[invalid altitude]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[valid unlocode in locode]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[valid address in upper and lower case]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[lifetime start in lowercase]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[lifetime end in lower case]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_node_fail_with_optional_attribute[valid lat using latitude__in]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_multiple_nodes[by id return single]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_multiple_nodes[by owner return multiple]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_multiple_nodes[by multiple owner return multiple]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_multiple_nodes[by short_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_multiple_nodes[by address]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_multiple_nodes[by multiple owner return multiple]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_get_multiple_nodes[by short_name__contains]" time="0.003" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_owner_to_node" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_remove_owner_from_node" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_delete_node" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_refine_delete_nodes" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[args only with node and inst IDs]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[args only with node and inst objects]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[kwargs only]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[no owners]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[no ID]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[premade link]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_create_link_success[args with list of links]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id: link_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[link_id and link_name]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners as a list of strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners as a list of objects]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id name and owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[name slice function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[two valid node_ids]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[all]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[nodes as a list of objects]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__contains: slice_func]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__contains: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__contains: substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__in: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__in: list of strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__in: string_pattern]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[id__in: format function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__contains: institution_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__contains: list of a string]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners_contains: list of strings]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__contains: all owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__contains: list of same owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__in: list of strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[owners__in: all owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[nodes__in: list of node objects]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[nodes__in: list of 2 nodes]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[nodes__in: list of 3 nodes]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[node__contains: list of node objects]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[node__contains: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_and_links[nodes__contains: list of node strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[empty id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: garbage_value]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: institution_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[name empty]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[name: node_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[name: institution_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[name: garbage value]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node_id and node_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: owner_id, name: owner_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: link_id and name: node_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners empty]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners: random value]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node_id, name and valid owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id: slice_function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[name: slice function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners: slicing]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[one valid owner out of three owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[two valid owners out of 3]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[one invalid and two valid owners]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[empty node]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[only one valid node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[one valid and one invalid node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[Three nodes]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[nodes slicing]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[same nodes]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__contains: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__contains: institution_id]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id_contains: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id_contains: list of strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id_contains: link_name]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: slice_function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: link_id with lower function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: institution_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: link_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[id__in: substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: slice_function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: list of strings]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: institution_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: string pattern]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__contains: substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners with substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: slice function]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners_in: institution_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners_in: with required string in between using concatenation operator]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: string]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[owners__in: list of a string]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: list of 3 nodes]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: slice_function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: node_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: substring]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__contains: string_pattern]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node_in: empty]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: node_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: slice_function]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: node_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: substring]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[node__in: string_pattern]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[link__contains: link_id]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_fail[invalid_name]" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_link_with_optional_fields" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_get_links[nodes as list of strings]" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_add_owner_to_link" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_remove_owner_from_link" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_delete_link" time="0.001" /><testcase classname="tests.test_manager.TestManager" name="test_manager_delete_link_with_optional_fields" time="0.002" /><testcase classname="tests.test_manager.TestManager" name="test_manager_successful_validation_with_default_objects" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_a_institution]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_institutions]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args__with_a_institution]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_institutions]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_node_id_and_kwargs_with_node_name_and_a_inst]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_node_id_and_kwargs_with_node_name_and_inst_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_name_and_a_institution]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_name_and_institution_list]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_Node_details]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_node_id_and_kwargs_with_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_node_details]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_node_name_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[kwargs_with_node_name_and_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[args_with_empty_string_and_kwargs_with_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with short name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with version]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with longitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with latitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with altitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with unlocode]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with address]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with life time start and life time end]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with life time start]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node with life time end]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node life time with ISO timezone]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node life time with microsecond]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node life time ISO timezone and microsecond]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node life time only date]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success[node lifetime UTC]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time with UTC timezone]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time with ISO timezone]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time with microsecond]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time UTC timezone and microsecond]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time ISO timezone and microsecond]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time only date]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time date with no time set]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_reformat[node life time with UTC label]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_lifetime_takes_iso_format" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_create_lifetime_fail[Life time only have time]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_lifetime_fail[Life time timezone using string]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_lifetime_fail[Life time with different format]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_create_success_same_data[kwargs_with_same_data]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[node_id_and_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__in_with_node_id]" time="0.002" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__in_with_list_of_strings]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__in_with_matching_string_pat1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__in_with_matching_string_pat2]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__in_with_matching_string_pat3]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__contains_with_node_id]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__contains_with_substring_of_string_pat_1]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__contains_with_substring_of_string_pat_2]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_success[id__contains_empty]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[version]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[longitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[latitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[altitude]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[unlocode]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[address]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[life time start]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_sucess_with_optional_fields[life time end]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_id_and_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_id]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_with_node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_with_list_of_strings]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_with_matching_string_pat1]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_with_matching_string_pat2]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_with_matching_string_pat3]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__contains_with_node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__contains_with_substring_of_string_pat_1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__contains_with_substring_of_string_pat_2]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__contains_empty]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__contains_node_id_pat]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_id_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_name_and_owner]" time="0.002" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_details_with_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_details_with_same_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[node_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_with_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_with_different_owner_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_with_same_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_list_of_strings]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__in_string]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[id__in_and_owners__in]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__contains_with_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owner__contains__same_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_a_owner_match_success[owners__contains_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_id_and_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[exact_institutions]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_with_node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_with_list_of_strings]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_with_matching_string_pat1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_with_matching_string_pat2]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_with_matching_string_pat3]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__contains_with_node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__contains_with_substring_of_string_pat_1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__contains_with_substring_of_string_pat_2]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__contains_empty]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__contains_node_id_pat]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_id_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_name_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[node_details_with_owners]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owners__in_with_different_owner_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owners__in_list_of_strings]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[id__in_and_owners__in]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owners__contains_with_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owner__contains_same_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owners__contains_different_owners_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_success[owners__contains_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[node_id_and_invalid_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id_and_owner]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[invalid id only]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[name_and_owner]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[invalid_name_only]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owner_only]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id_name_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id_name_and_owners]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owner__in_without_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__in_with_ins_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__in_node_id]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__in_node_name]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__contains_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__contains__node__name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners_contains_inst_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners_contains_inst_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners__contains_institution]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[owners_contains_institution_list]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__in_with_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__in_empty]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__in_pattern]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[invalid_node_id]" time="0.000" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__in_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__contains_list_of_string]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__contains_pat1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_match_fail[id__contains_pat2]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id and name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id only]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[name_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id_name_and_owner]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id_name_and_owners]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[owner__in_with_other_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[owner__in_different_inst_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__in_with_node_name]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__in_empty]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__in_pattern]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[invalid_node_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__in_institution_id]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__contains_list_of_string]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__contains_pat1]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_node_with_owners_match_fail[id__contains_pat2]" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_institution_eq_success" time="0.001" /><testcase classname="tests.test_node.TestNode" name="test_institution_eq_fail" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[kwargs with id name]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[kwargs with only name]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[kwargs name andempty id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[kwargs id as integer]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[args with name]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_create_success[kwargs with primary owner]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id only]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[name only]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id name]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id institution]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id nodes]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id in list]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id__in_with matching string]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id__in_with_matching string pat3]" time="0.003" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id__contains link id]" time="0.004" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id__contains substring]" time="0.003" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id_ contains empty]" time="0.003" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_match_success[id__contains slice func]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_adding_institution[with args]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_adding_institution[with kwargs]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_adding_institution[without id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_delete_institution" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[values only]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[keywords only]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[with single owner]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[with multiple owners]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[with owner id as string]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_node[without id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_delete_node" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_assigns_primary_owner_with_institution" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[id match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[id and name match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[owners match with strings]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[owners match with objects]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[name match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_node[all match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[add name property]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[add attribute]" time="0.004" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[add to existing attribute]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[rewrite names of multiple elements]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[remove only entry from list]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements[can delete custom attribute]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements_failure_cases[user cannot delete non existent property]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements_failure_cases[Cannot remove value that doesn't exist]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements_failure_cases[cannot append and delete at the same time]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_update_elements_failure_cases[Cannot remove from list with value that doesn't exist]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_additional_properties" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_additional_properties_case_sensitivity" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[values only]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[name only]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[keywords only]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[link with nodes]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[link has one owner]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[link with node has owner]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_add_link[link with multiple owners]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_link[id match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_link[name match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_link[id and name match]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_link[owners match with objects]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_get_link[node name match]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[empty id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[id: garbage_value]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[id: node_id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[id: institution_id]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[name empty]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[name: node_name]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[name: institution_name]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_get_link_fail[name: garbage value]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_topology_delete_link" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_pass_primary_owner_in_institution_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_primary_owner_not_in_institution_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_pass_add_institution_type_not_in_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_add_node_owner_not_in_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_add_link_owner_not_in_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_add_link_nodes_not_in_list" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_add_link_with_one_node" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_add_link_with_three_nodes" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_lifetime_with_incorrect_format[no year]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_lifetime_with_incorrect_format[two digit year]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_lifetime_with_incorrect_format[no second]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_lifetime_with_incorrect_format[contains AM/PM]" time="0.002" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_lifetime_with_incorrect_format[only end time error]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_address_with_incorrect_format[longitiude over 180]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_address_with_incorrect_format[latitude over 90]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_address_with_incorrect_format[altitude is not float]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_address_with_incorrect_format[unlocode is not string]" time="0.001" /><testcase classname="tests.test_topology.TestTopology" name="test_fail_address_with_incorrect_format[address is not string]" time="0.001" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_minimal_topology" time="0.018" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_multiple_institutions" time="0.005" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_with_single_node" time="0.005" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_with_multiple_nodes" time="0.005" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_with_single_link" time="0.007" /><testcase classname="tests.test_parser_reader.test_reader.TestReader" name="test_reader_with_multiple_links" time="0.007" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_default_topology" time="0.004" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_simple_topology_with_no_institution" time="0.004" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_single_institution" time="0.006" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_institution_as_primary_owner" time="0.004" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_multiple_institutions" time="0.008" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_single_node" time="0.006" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_detailed_node" time="0.006" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_multiple_nodes" time="0.008" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_single_link" time="0.006" /><testcase classname="tests.test_writer.test_writer.TestManager" name="test_writer_create_topology_with_multiple_links" time="0.010" /><testcase classname="tests.test_writer.test_writer_shortcut.TestWriterShortCut" name="test_checking_write_to_string_shortcut" time="0.002" /><testcase classname="tests.test_writer.test_writer_shortcut.TestWriterShortCut" name="test_checking_write_to_output_stream_shortcut" time="0.001" /><testcase classname="tests.test_writer.test_writer_shortcut.TestWriterShortCut" name="test_checking_write_to_file_shortcut" time="0.005" /></testsuite></testsuites>